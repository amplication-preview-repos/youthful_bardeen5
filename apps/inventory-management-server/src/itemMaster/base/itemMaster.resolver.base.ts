/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ItemMaster } from "./ItemMaster";
import { ItemMasterCountArgs } from "./ItemMasterCountArgs";
import { ItemMasterFindManyArgs } from "./ItemMasterFindManyArgs";
import { ItemMasterFindUniqueArgs } from "./ItemMasterFindUniqueArgs";
import { CreateItemMasterArgs } from "./CreateItemMasterArgs";
import { UpdateItemMasterArgs } from "./UpdateItemMasterArgs";
import { DeleteItemMasterArgs } from "./DeleteItemMasterArgs";
import { ItemMasterService } from "../itemMaster.service";
@graphql.Resolver(() => ItemMaster)
export class ItemMasterResolverBase {
  constructor(protected readonly service: ItemMasterService) {}

  async _itemMastersMeta(
    @graphql.Args() args: ItemMasterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ItemMaster])
  async itemMasters(
    @graphql.Args() args: ItemMasterFindManyArgs
  ): Promise<ItemMaster[]> {
    return this.service.itemMasters(args);
  }

  @graphql.Query(() => ItemMaster, { nullable: true })
  async itemMaster(
    @graphql.Args() args: ItemMasterFindUniqueArgs
  ): Promise<ItemMaster | null> {
    const result = await this.service.itemMaster(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ItemMaster)
  async createItemMaster(
    @graphql.Args() args: CreateItemMasterArgs
  ): Promise<ItemMaster> {
    return await this.service.createItemMaster({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ItemMaster)
  async updateItemMaster(
    @graphql.Args() args: UpdateItemMasterArgs
  ): Promise<ItemMaster | null> {
    try {
      return await this.service.updateItemMaster({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ItemMaster)
  async deleteItemMaster(
    @graphql.Args() args: DeleteItemMasterArgs
  ): Promise<ItemMaster | null> {
    try {
      return await this.service.deleteItemMaster(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
