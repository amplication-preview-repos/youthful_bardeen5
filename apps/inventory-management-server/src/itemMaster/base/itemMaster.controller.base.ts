/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItemMasterService } from "../itemMaster.service";
import { ItemMasterCreateInput } from "./ItemMasterCreateInput";
import { ItemMaster } from "./ItemMaster";
import { ItemMasterFindManyArgs } from "./ItemMasterFindManyArgs";
import { ItemMasterWhereUniqueInput } from "./ItemMasterWhereUniqueInput";
import { ItemMasterUpdateInput } from "./ItemMasterUpdateInput";

export class ItemMasterControllerBase {
  constructor(protected readonly service: ItemMasterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ItemMaster })
  async createItemMaster(
    @common.Body() data: ItemMasterCreateInput
  ): Promise<ItemMaster> {
    return await this.service.createItemMaster({
      data: data,
      select: {
        avgCost: true,
        createdAt: true,
        dateTime: true,
        description: true,
        guid: true,
        id: true,
        internalLotSeed: true,
        internalSnSeed: true,
        itemId: true,
        lastCost: true,
        lastDateTime: true,
        lotRule: true,
        mfgUomConvRate: true,
        name: true,
        qoh: true,
        revision: true,
        snRule: true,
        stdCost: true,
        uom: true,
        updatedAt: true,
        vdocsLink: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ItemMaster] })
  @ApiNestedQuery(ItemMasterFindManyArgs)
  async itemMasters(@common.Req() request: Request): Promise<ItemMaster[]> {
    const args = plainToClass(ItemMasterFindManyArgs, request.query);
    return this.service.itemMasters({
      ...args,
      select: {
        avgCost: true,
        createdAt: true,
        dateTime: true,
        description: true,
        guid: true,
        id: true,
        internalLotSeed: true,
        internalSnSeed: true,
        itemId: true,
        lastCost: true,
        lastDateTime: true,
        lotRule: true,
        mfgUomConvRate: true,
        name: true,
        qoh: true,
        revision: true,
        snRule: true,
        stdCost: true,
        uom: true,
        updatedAt: true,
        vdocsLink: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ItemMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async itemMaster(
    @common.Param() params: ItemMasterWhereUniqueInput
  ): Promise<ItemMaster | null> {
    const result = await this.service.itemMaster({
      where: params,
      select: {
        avgCost: true,
        createdAt: true,
        dateTime: true,
        description: true,
        guid: true,
        id: true,
        internalLotSeed: true,
        internalSnSeed: true,
        itemId: true,
        lastCost: true,
        lastDateTime: true,
        lotRule: true,
        mfgUomConvRate: true,
        name: true,
        qoh: true,
        revision: true,
        snRule: true,
        stdCost: true,
        uom: true,
        updatedAt: true,
        vdocsLink: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ItemMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateItemMaster(
    @common.Param() params: ItemMasterWhereUniqueInput,
    @common.Body() data: ItemMasterUpdateInput
  ): Promise<ItemMaster | null> {
    try {
      return await this.service.updateItemMaster({
        where: params,
        data: data,
        select: {
          avgCost: true,
          createdAt: true,
          dateTime: true,
          description: true,
          guid: true,
          id: true,
          internalLotSeed: true,
          internalSnSeed: true,
          itemId: true,
          lastCost: true,
          lastDateTime: true,
          lotRule: true,
          mfgUomConvRate: true,
          name: true,
          qoh: true,
          revision: true,
          snRule: true,
          stdCost: true,
          uom: true,
          updatedAt: true,
          vdocsLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ItemMaster })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteItemMaster(
    @common.Param() params: ItemMasterWhereUniqueInput
  ): Promise<ItemMaster | null> {
    try {
      return await this.service.deleteItemMaster({
        where: params,
        select: {
          avgCost: true,
          createdAt: true,
          dateTime: true,
          description: true,
          guid: true,
          id: true,
          internalLotSeed: true,
          internalSnSeed: true,
          itemId: true,
          lastCost: true,
          lastDateTime: true,
          lotRule: true,
          mfgUomConvRate: true,
          name: true,
          qoh: true,
          revision: true,
          snRule: true,
          stdCost: true,
          uom: true,
          updatedAt: true,
          vdocsLink: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
