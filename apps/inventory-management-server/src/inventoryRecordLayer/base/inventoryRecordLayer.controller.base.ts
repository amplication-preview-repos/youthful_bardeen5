/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InventoryRecordLayerService } from "../inventoryRecordLayer.service";
import { InventoryRecordLayerCreateInput } from "./InventoryRecordLayerCreateInput";
import { InventoryRecordLayer } from "./InventoryRecordLayer";
import { InventoryRecordLayerFindManyArgs } from "./InventoryRecordLayerFindManyArgs";
import { InventoryRecordLayerWhereUniqueInput } from "./InventoryRecordLayerWhereUniqueInput";
import { InventoryRecordLayerUpdateInput } from "./InventoryRecordLayerUpdateInput";

export class InventoryRecordLayerControllerBase {
  constructor(protected readonly service: InventoryRecordLayerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InventoryRecordLayer })
  async createInventoryRecordLayer(
    @common.Body() data: InventoryRecordLayerCreateInput
  ): Promise<InventoryRecordLayer> {
    return await this.service.createInventoryRecordLayer({
      data: data,
      select: {
        cost: true,
        createdAt: true,
        dateTime: true,
        direction: true,
        document: true,
        documentId: true,
        externalLot: true,
        externalSn: true,
        guid: true,
        id: true,
        internalLot: true,
        internalSn: true,
        itemGuid: true,
        itemId: true,
        qty: true,
        revision: true,
        softDeleted: true,
        updatedAt: true,
        vdocsLink: true,
        virloutguid: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InventoryRecordLayer] })
  @ApiNestedQuery(InventoryRecordLayerFindManyArgs)
  async inventoryRecordLayers(
    @common.Req() request: Request
  ): Promise<InventoryRecordLayer[]> {
    const args = plainToClass(InventoryRecordLayerFindManyArgs, request.query);
    return this.service.inventoryRecordLayers({
      ...args,
      select: {
        cost: true,
        createdAt: true,
        dateTime: true,
        direction: true,
        document: true,
        documentId: true,
        externalLot: true,
        externalSn: true,
        guid: true,
        id: true,
        internalLot: true,
        internalSn: true,
        itemGuid: true,
        itemId: true,
        qty: true,
        revision: true,
        softDeleted: true,
        updatedAt: true,
        vdocsLink: true,
        virloutguid: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InventoryRecordLayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async inventoryRecordLayer(
    @common.Param() params: InventoryRecordLayerWhereUniqueInput
  ): Promise<InventoryRecordLayer | null> {
    const result = await this.service.inventoryRecordLayer({
      where: params,
      select: {
        cost: true,
        createdAt: true,
        dateTime: true,
        direction: true,
        document: true,
        documentId: true,
        externalLot: true,
        externalSn: true,
        guid: true,
        id: true,
        internalLot: true,
        internalSn: true,
        itemGuid: true,
        itemId: true,
        qty: true,
        revision: true,
        softDeleted: true,
        updatedAt: true,
        vdocsLink: true,
        virloutguid: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InventoryRecordLayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInventoryRecordLayer(
    @common.Param() params: InventoryRecordLayerWhereUniqueInput,
    @common.Body() data: InventoryRecordLayerUpdateInput
  ): Promise<InventoryRecordLayer | null> {
    try {
      return await this.service.updateInventoryRecordLayer({
        where: params,
        data: data,
        select: {
          cost: true,
          createdAt: true,
          dateTime: true,
          direction: true,
          document: true,
          documentId: true,
          externalLot: true,
          externalSn: true,
          guid: true,
          id: true,
          internalLot: true,
          internalSn: true,
          itemGuid: true,
          itemId: true,
          qty: true,
          revision: true,
          softDeleted: true,
          updatedAt: true,
          vdocsLink: true,
          virloutguid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InventoryRecordLayer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInventoryRecordLayer(
    @common.Param() params: InventoryRecordLayerWhereUniqueInput
  ): Promise<InventoryRecordLayer | null> {
    try {
      return await this.service.deleteInventoryRecordLayer({
        where: params,
        select: {
          cost: true,
          createdAt: true,
          dateTime: true,
          direction: true,
          document: true,
          documentId: true,
          externalLot: true,
          externalSn: true,
          guid: true,
          id: true,
          internalLot: true,
          internalSn: true,
          itemGuid: true,
          itemId: true,
          qty: true,
          revision: true,
          softDeleted: true,
          updatedAt: true,
          vdocsLink: true,
          virloutguid: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
