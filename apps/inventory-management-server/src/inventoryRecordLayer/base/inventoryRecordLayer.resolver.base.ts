/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InventoryRecordLayer } from "./InventoryRecordLayer";
import { InventoryRecordLayerCountArgs } from "./InventoryRecordLayerCountArgs";
import { InventoryRecordLayerFindManyArgs } from "./InventoryRecordLayerFindManyArgs";
import { InventoryRecordLayerFindUniqueArgs } from "./InventoryRecordLayerFindUniqueArgs";
import { CreateInventoryRecordLayerArgs } from "./CreateInventoryRecordLayerArgs";
import { UpdateInventoryRecordLayerArgs } from "./UpdateInventoryRecordLayerArgs";
import { DeleteInventoryRecordLayerArgs } from "./DeleteInventoryRecordLayerArgs";
import { InventoryRecordLayerService } from "../inventoryRecordLayer.service";
@graphql.Resolver(() => InventoryRecordLayer)
export class InventoryRecordLayerResolverBase {
  constructor(protected readonly service: InventoryRecordLayerService) {}

  async _inventoryRecordLayersMeta(
    @graphql.Args() args: InventoryRecordLayerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InventoryRecordLayer])
  async inventoryRecordLayers(
    @graphql.Args() args: InventoryRecordLayerFindManyArgs
  ): Promise<InventoryRecordLayer[]> {
    return this.service.inventoryRecordLayers(args);
  }

  @graphql.Query(() => InventoryRecordLayer, { nullable: true })
  async inventoryRecordLayer(
    @graphql.Args() args: InventoryRecordLayerFindUniqueArgs
  ): Promise<InventoryRecordLayer | null> {
    const result = await this.service.inventoryRecordLayer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InventoryRecordLayer)
  async createInventoryRecordLayer(
    @graphql.Args() args: CreateInventoryRecordLayerArgs
  ): Promise<InventoryRecordLayer> {
    return await this.service.createInventoryRecordLayer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InventoryRecordLayer)
  async updateInventoryRecordLayer(
    @graphql.Args() args: UpdateInventoryRecordLayerArgs
  ): Promise<InventoryRecordLayer | null> {
    try {
      return await this.service.updateInventoryRecordLayer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InventoryRecordLayer)
  async deleteInventoryRecordLayer(
    @graphql.Args() args: DeleteInventoryRecordLayerArgs
  ): Promise<InventoryRecordLayer | null> {
    try {
      return await this.service.deleteInventoryRecordLayer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
